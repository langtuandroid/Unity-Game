### YamlMime:ManagedReference
items:
- uid: LobsterFramework.Utility.SerializableDictionary`2
  commentId: T:LobsterFramework.Utility.SerializableDictionary`2
  id: SerializableDictionary`2
  parent: LobsterFramework.Utility
  children:
  - LobsterFramework.Utility.SerializableDictionary`2.Add(`0,`1)
  - LobsterFramework.Utility.SerializableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - LobsterFramework.Utility.SerializableDictionary`2.Clear
  - LobsterFramework.Utility.SerializableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - LobsterFramework.Utility.SerializableDictionary`2.ContainsKey(`0)
  - LobsterFramework.Utility.SerializableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - LobsterFramework.Utility.SerializableDictionary`2.Count
  - LobsterFramework.Utility.SerializableDictionary`2.dictionary
  - LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator
  - LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly
  - LobsterFramework.Utility.SerializableDictionary`2.Item(`0)
  - LobsterFramework.Utility.SerializableDictionary`2.keys
  - LobsterFramework.Utility.SerializableDictionary`2.Keys
  - LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize
  - LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize
  - LobsterFramework.Utility.SerializableDictionary`2.Remove(`0)
  - LobsterFramework.Utility.SerializableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - LobsterFramework.Utility.SerializableDictionary`2.TryGetValue(`0,`1@)
  - LobsterFramework.Utility.SerializableDictionary`2.values
  - LobsterFramework.Utility.SerializableDictionary`2.Values
  langs:
  - csharp
  - vb
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: SerializableDictionary
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 7
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: >-
      [Serializable]

      public abstract class SerializableDictionary<TKey, TValue> : ISerializationCallbackReceiver
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <Serializable>

      Public MustInherit Class SerializableDictionary(Of TKey, TValue) Implements ISerializationCallbackReceiver
  inheritance:
  - System.Object
  derivedClasses:
  - LobsterFramework.Utility.StringAbilityConfigDictionary
  - LobsterFramework.Utility.TypeAbilityDictionary
  - LobsterFramework.Utility.TypeAbilityStatDictionary
  implements:
  - UnityEngine.ISerializationCallbackReceiver
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
- uid: LobsterFramework.Utility.SerializableDictionary`2.keys
  commentId: F:LobsterFramework.Utility.SerializableDictionary`2.keys
  id: keys
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: keys
  nameWithType: SerializableDictionary<TKey, TValue>.keys
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.keys
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: keys
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 11
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: >-
      [SerializeField]

      protected List<TKey> keys
    return:
      type: System.Collections.Generic.List{{TKey}}
    content.vb: >-
      <SerializeField>

      Protected keys As List(Of TKey)
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).keys
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).keys
- uid: LobsterFramework.Utility.SerializableDictionary`2.values
  commentId: F:LobsterFramework.Utility.SerializableDictionary`2.values
  id: values
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: values
  nameWithType: SerializableDictionary<TKey, TValue>.values
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.values
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: values
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 12
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: >-
      [SerializeField]

      protected List<TValue> values
    return:
      type: System.Collections.Generic.List{{TValue}}
    content.vb: >-
      <SerializeField>

      Protected values As List(Of TValue)
  attributes:
  - type: UnityEngine.SerializeField
    ctor: UnityEngine.SerializeField.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).values
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).values
- uid: LobsterFramework.Utility.SerializableDictionary`2.dictionary
  commentId: F:LobsterFramework.Utility.SerializableDictionary`2.dictionary
  id: dictionary
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: dictionary
  nameWithType: SerializableDictionary<TKey, TValue>.dictionary
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.dictionary
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: dictionary
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 13
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: protected Dictionary<TKey, TValue> dictionary
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: Protected dictionary As Dictionary(Of TKey, TValue)
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).dictionary
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).dictionary
- uid: LobsterFramework.Utility.SerializableDictionary`2.Item(`0)
  commentId: P:LobsterFramework.Utility.SerializableDictionary`2.Item(`0)
  id: Item(`0)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: SerializableDictionary<TKey, TValue>.this[TKey]
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: this[]
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 15
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: LobsterFramework.Utility.SerializableDictionary`2.Item*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: LobsterFramework.Utility.SerializableDictionary`2.Keys
  commentId: P:LobsterFramework.Utility.SerializableDictionary`2.Keys
  id: Keys
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SerializableDictionary<TKey, TValue>.Keys
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Keys
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 17
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: LobsterFramework.Utility.SerializableDictionary`2.Keys*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Keys
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Keys
- uid: LobsterFramework.Utility.SerializableDictionary`2.Values
  commentId: P:LobsterFramework.Utility.SerializableDictionary`2.Values
  id: Values
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SerializableDictionary<TKey, TValue>.Values
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Values
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 19
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public ICollection<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
  overload: LobsterFramework.Utility.SerializableDictionary`2.Values*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Values
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Values
- uid: LobsterFramework.Utility.SerializableDictionary`2.Count
  commentId: P:LobsterFramework.Utility.SerializableDictionary`2.Count
  id: Count
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SerializableDictionary<TKey, TValue>.Count
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Count
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 21
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: LobsterFramework.Utility.SerializableDictionary`2.Count*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Count
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Count
- uid: LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly
  commentId: P:LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly
  id: IsReadOnly
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: SerializableDictionary<TKey, TValue>.IsReadOnly
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.IsReadOnly
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: IsReadOnly
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 23
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).IsReadOnly
- uid: LobsterFramework.Utility.SerializableDictionary`2.Add(`0,`1)
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: SerializableDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Add
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 25
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: LobsterFramework.Utility.SerializableDictionary`2.Add*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: LobsterFramework.Utility.SerializableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: SerializableDictionary<TKey, TValue>.Add(KeyValuePair<TKey, TValue>)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Add
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 30
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, TValue))
  overload: LobsterFramework.Utility.SerializableDictionary`2.Add*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
- uid: LobsterFramework.Utility.SerializableDictionary`2.Clear
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Clear
  id: Clear
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SerializableDictionary<TKey, TValue>.Clear()
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Clear
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 35
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: LobsterFramework.Utility.SerializableDictionary`2.Clear*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Clear()
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Clear()
- uid: LobsterFramework.Utility.SerializableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: SerializableDictionary<TKey, TValue>.Contains(KeyValuePair<TKey, TValue>)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Contains
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 40
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.Contains*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
- uid: LobsterFramework.Utility.SerializableDictionary`2.ContainsKey(`0)
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: SerializableDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: ContainsKey
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 45
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.ContainsKey*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: LobsterFramework.Utility.SerializableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, TValue>[], int)
  nameWithType: SerializableDictionary<TKey, TValue>.CopyTo(KeyValuePair<TKey, TValue>[], int)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], int)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: CopyTo
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 50
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer)
  overload: LobsterFramework.Utility.SerializableDictionary`2.CopyTo*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Integer)
- uid: LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SerializableDictionary<TKey, TValue>.GetEnumerator()
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: GetEnumerator
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 55
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).GetEnumerator()
- uid: LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: OnAfterDeserialize
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 60
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void OnAfterDeserialize()
    content.vb: Public Sub OnAfterDeserialize()
  overload: LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
- uid: LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: OnBeforeSerialize
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 72
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public void OnBeforeSerialize()
    content.vb: Public Sub OnBeforeSerialize()
  overload: LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize*
  implements:
  - UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
- uid: LobsterFramework.Utility.SerializableDictionary`2.Remove(`0)
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: SerializableDictionary<TKey, TValue>.Remove(TKey)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Remove
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 83
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.Remove*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Remove(TKey)
- uid: LobsterFramework.Utility.SerializableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: SerializableDictionary<TKey, TValue>.Remove(KeyValuePair<TKey, TValue>)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: Remove
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 88
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.Remove*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
- uid: LobsterFramework.Utility.SerializableDictionary`2.TryGetValue(`0,`1@)
  commentId: M:LobsterFramework.Utility.SerializableDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: LobsterFramework.Utility.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: SerializableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    id: TryGetValue
    path: ../Assets/Scripts/Utility/SerializableDataStructures/SerializableDictionary.cs
    startLine: 93
  assemblies:
  - MyScripts
  namespace: LobsterFramework.Utility
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: LobsterFramework.Utility.SerializableDictionary`2.TryGetValue*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
references:
- uid: LobsterFramework.Utility
  commentId: N:LobsterFramework.Utility
  name: LobsterFramework.Utility
  nameWithType: LobsterFramework.Utility
  fullName: LobsterFramework.Utility
  spec.csharp:
  - uid: LobsterFramework
    name: LobsterFramework
  - name: .
  - uid: LobsterFramework.Utility
    name: Utility
  spec.vb:
  - uid: LobsterFramework
    name: LobsterFramework
  - name: .
  - uid: LobsterFramework.Utility
    name: Utility
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.ISerializationCallbackReceiver
  commentId: T:UnityEngine.ISerializationCallbackReceiver
  parent: UnityEngine
  isExternal: true
  name: ISerializationCallbackReceiver
  nameWithType: ISerializationCallbackReceiver
  fullName: UnityEngine.ISerializationCallbackReceiver
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: System.Collections.Generic.List{{TKey}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TKey>
  nameWithType: List<TKey>
  fullName: System.Collections.Generic.List<TKey>
  nameWithType.vb: List(Of TKey)
  fullName.vb: System.Collections.Generic.List(Of TKey)
  name.vb: List(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.List{{TValue}}
  commentId: T:System.Collections.Generic.List{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TValue>
  nameWithType: List<TValue>
  fullName: System.Collections.Generic.List<TValue>
  nameWithType.vb: List(Of TValue)
  fullName.vb: System.Collections.Generic.List(Of TValue)
  name.vb: List(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.Item*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Item
  name: this
  nameWithType: SerializableDictionary<TKey, TValue>.this
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.this
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).this[]
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: LobsterFramework.Utility.SerializableDictionary`2.Keys*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Keys
  name: Keys
  nameWithType: SerializableDictionary<TKey, TValue>.Keys
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Keys
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Keys
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.Values*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Values
  name: Values
  nameWithType: SerializableDictionary<TKey, TValue>.Values
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Values
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Values
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.Count*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Count
  name: Count
  nameWithType: SerializableDictionary<TKey, TValue>.Count
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Count
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Count
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.IsReadOnly
  name: IsReadOnly
  nameWithType: SerializableDictionary<TKey, TValue>.IsReadOnly
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.IsReadOnly
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).IsReadOnly
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).IsReadOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LobsterFramework.Utility.SerializableDictionary`2.Add*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Add
  name: Add
  nameWithType: SerializableDictionary<TKey, TValue>.Add
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Add
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Add
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Add
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.Clear*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Clear
  name: Clear
  nameWithType: SerializableDictionary<TKey, TValue>.Clear
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Clear
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Clear
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Clear
- uid: LobsterFramework.Utility.SerializableDictionary`2.Contains*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Contains
  name: Contains
  nameWithType: SerializableDictionary<TKey, TValue>.Contains
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Contains
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Contains
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Contains
- uid: LobsterFramework.Utility.SerializableDictionary`2.ContainsKey*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.ContainsKey
  name: ContainsKey
  nameWithType: SerializableDictionary<TKey, TValue>.ContainsKey
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).ContainsKey
- uid: LobsterFramework.Utility.SerializableDictionary`2.CopyTo*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.CopyTo
  name: CopyTo
  nameWithType: SerializableDictionary<TKey, TValue>.CopyTo
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.CopyTo
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).CopyTo
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  nameWithType: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  nameWithType.vb: KeyValuePair(Of TKey, TValue)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: (
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.GetEnumerator
  name: GetEnumerator
  nameWithType: SerializableDictionary<TKey, TValue>.GetEnumerator
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.GetEnumerator
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).GetEnumerator
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnAfterDeserialize()
  nameWithType: ISerializationCallbackReceiver.OnAfterDeserialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
    name: OnAfterDeserialize
    isExternal: true
  - name: (
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
- uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  commentId: M:UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
  parent: UnityEngine.ISerializationCallbackReceiver
  isExternal: true
  name: OnBeforeSerialize()
  nameWithType: ISerializationCallbackReceiver.OnBeforeSerialize()
  fullName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
  spec.csharp:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
    name: OnBeforeSerialize
    isExternal: true
  - name: (
  - name: )
- uid: LobsterFramework.Utility.SerializableDictionary`2.Remove*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.Remove
  name: Remove
  nameWithType: SerializableDictionary<TKey, TValue>.Remove
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.Remove
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Remove
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).Remove
- uid: LobsterFramework.Utility.SerializableDictionary`2.TryGetValue*
  commentId: Overload:LobsterFramework.Utility.SerializableDictionary`2.TryGetValue
  name: TryGetValue
  nameWithType: SerializableDictionary<TKey, TValue>.TryGetValue
  fullName: LobsterFramework.Utility.SerializableDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: LobsterFramework.Utility.SerializableDictionary(Of TKey, TValue).TryGetValue
