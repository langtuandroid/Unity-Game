### YamlMime:ManagedReference
items:
- uid: Global.Task
  commentId: T:Global.Task
  id: Task
  parent: Global
  children:
  - Global.Task.#ctor(System.Collections.IEnumerator,System.Boolean)
  - Global.Task.Finished
  - Global.Task.Pause
  - Global.Task.Paused
  - Global.Task.Running
  - Global.Task.Start
  - Global.Task.Stop
  - Global.Task.Unpause
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: Task
  fullName: Task
  type: Class
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Task
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 40
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public class Task
    content.vb: Public Class Task
  inheritance:
  - System.Object
- uid: Global.Task.Running
  commentId: P:Global.Task.Running
  id: Running
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Running
  nameWithType: Task.Running
  fullName: Task.Running
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Running
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 44
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public bool Running { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Running As Boolean
  overload: Global.Task.Running*
- uid: Global.Task.Paused
  commentId: P:Global.Task.Paused
  id: Paused
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Paused
  nameWithType: Task.Paused
  fullName: Task.Paused
  type: Property
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Paused
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 53
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public bool Paused { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property Paused As Boolean
  overload: Global.Task.Paused*
- uid: Global.Task.Finished
  commentId: E:Global.Task.Finished
  id: Finished
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Finished
  nameWithType: Task.Finished
  fullName: Task.Finished
  type: Event
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Finished
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 66
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public event Task.FinishedHandler Finished
    return:
      type: Global.Task.FinishedHandler
    content.vb: Public Event Finished As Task.FinishedHandler
- uid: Global.Task.#ctor(System.Collections.IEnumerator,System.Boolean)
  commentId: M:Global.Task.#ctor(System.Collections.IEnumerator,System.Boolean)
  id: '#ctor(System.Collections.IEnumerator,System.Boolean)'
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Task(IEnumerator, bool)
  nameWithType: Task.Task(IEnumerator, bool)
  fullName: Task.Task(System.Collections.IEnumerator, bool)
  type: Constructor
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: .ctor
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 72
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public Task(IEnumerator c, bool autoStart = true)
    parameters:
    - id: c
      type: System.Collections.IEnumerator
    - id: autoStart
      type: System.Boolean
    content.vb: Public Sub New(c As IEnumerator, autoStart As Boolean = True)
  overload: Global.Task.#ctor*
  nameWithType.vb: Task.New(IEnumerator, Boolean)
  fullName.vb: Task.New(System.Collections.IEnumerator, Boolean)
  name.vb: New(IEnumerator, Boolean)
- uid: Global.Task.Start
  commentId: M:Global.Task.Start
  id: Start
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Task.Start()
  fullName: Task.Start()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Start
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 81
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public void Start()
    content.vb: Public Sub Start()
  overload: Global.Task.Start*
- uid: Global.Task.Stop
  commentId: M:Global.Task.Stop
  id: Stop
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Stop()
  nameWithType: Task.Stop()
  fullName: Task.Stop()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Stop
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 87
  assemblies:
  - MyScripts
  namespace: Global
  example: []
  syntax:
    content: public void Stop()
    content.vb: Public Sub [Stop]()
  overload: Global.Task.Stop*
- uid: Global.Task.Pause
  commentId: M:Global.Task.Pause
  id: Pause
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: Task.Pause()
  fullName: Task.Pause()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Pause
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 92
  assemblies:
  - MyScripts
  namespace: Global
  syntax:
    content: public void Pause()
    content.vb: Public Sub Pause()
  overload: Global.Task.Pause*
- uid: Global.Task.Unpause
  commentId: M:Global.Task.Unpause
  id: Unpause
  parent: Global.Task
  langs:
  - csharp
  - vb
  name: Unpause()
  nameWithType: Task.Unpause()
  fullName: Task.Unpause()
  type: Method
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Utility/TaskManager.cs
    id: Unpause
    path: ../Assets/Scripts/Utility/TaskManager.cs
    startLine: 97
  assemblies:
  - MyScripts
  namespace: Global
  syntax:
    content: public void Unpause()
    content.vb: Public Sub Unpause()
  overload: Global.Task.Unpause*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Task.Running*
  commentId: Overload:Global.Task.Running
  name: Running
  nameWithType: Task.Running
  fullName: Task.Running
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.Task.Paused*
  commentId: Overload:Global.Task.Paused
  name: Paused
  nameWithType: Task.Paused
  fullName: Task.Paused
- uid: Global.Task.FinishedHandler
  commentId: T:Global.Task.FinishedHandler
  name: Task.FinishedHandler
  nameWithType: Task.FinishedHandler
  fullName: Task.FinishedHandler
  spec.csharp:
  - uid: Global.Task
    name: Task
  - name: .
  - uid: Global.Task.FinishedHandler
    name: FinishedHandler
  spec.vb:
  - uid: Global.Task
    name: Task
  - name: .
  - uid: Global.Task.FinishedHandler
    name: FinishedHandler
- uid: Global.Task.#ctor*
  commentId: Overload:Global.Task.#ctor
  name: Task
  nameWithType: Task.Task
  fullName: Task.Task
  nameWithType.vb: Task.New
  fullName.vb: Task.New
  name.vb: New
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
- uid: Global.Task.Start*
  commentId: Overload:Global.Task.Start
  name: Start
  nameWithType: Task.Start
  fullName: Task.Start
- uid: Global.Task.Stop*
  commentId: Overload:Global.Task.Stop
  name: Stop
  nameWithType: Task.Stop
  fullName: Task.Stop
- uid: Global.Task.Pause*
  commentId: Overload:Global.Task.Pause
  name: Pause
  nameWithType: Task.Pause
  fullName: Task.Pause
- uid: Global.Task.Unpause*
  commentId: Overload:Global.Task.Unpause
  name: Unpause
  nameWithType: Task.Unpause
  fullName: Task.Unpause
