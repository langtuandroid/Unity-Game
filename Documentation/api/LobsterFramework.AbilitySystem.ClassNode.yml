### YamlMime:ManagedReference
items:
- uid: LobsterFramework.AbilitySystem.ClassNode
  commentId: T:LobsterFramework.AbilitySystem.ClassNode
  id: ClassNode
  parent: LobsterFramework.AbilitySystem
  children:
  - LobsterFramework.AbilitySystem.ClassNode.#ctor(System.Type)
  - LobsterFramework.AbilitySystem.ClassNode.children
  - LobsterFramework.AbilitySystem.ClassNode.parent
  - LobsterFramework.AbilitySystem.ClassNode.requirements
  - LobsterFramework.AbilitySystem.ClassNode.type
  langs:
  - csharp
  - vb
  name: ClassNode
  nameWithType: ClassNode
  fullName: LobsterFramework.AbilitySystem.ClassNode
  type: Class
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: ClassNode
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 141
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public class ClassNode
    content.vb: Public Class ClassNode
  inheritance:
  - System.Object
- uid: LobsterFramework.AbilitySystem.ClassNode.type
  commentId: F:LobsterFramework.AbilitySystem.ClassNode.type
  id: type
  parent: LobsterFramework.AbilitySystem.ClassNode
  langs:
  - csharp
  - vb
  name: type
  nameWithType: ClassNode.type
  fullName: LobsterFramework.AbilitySystem.ClassNode.type
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: type
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 143
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public Type type
    return:
      type: System.Type
    content.vb: Public type As Type
- uid: LobsterFramework.AbilitySystem.ClassNode.parent
  commentId: F:LobsterFramework.AbilitySystem.ClassNode.parent
  id: parent
  parent: LobsterFramework.AbilitySystem.ClassNode
  langs:
  - csharp
  - vb
  name: parent
  nameWithType: ClassNode.parent
  fullName: LobsterFramework.AbilitySystem.ClassNode.parent
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: parent
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 144
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public ClassNode parent
    return:
      type: LobsterFramework.AbilitySystem.ClassNode
    content.vb: Public parent As ClassNode
- uid: LobsterFramework.AbilitySystem.ClassNode.children
  commentId: F:LobsterFramework.AbilitySystem.ClassNode.children
  id: children
  parent: LobsterFramework.AbilitySystem.ClassNode
  langs:
  - csharp
  - vb
  name: children
  nameWithType: ClassNode.children
  fullName: LobsterFramework.AbilitySystem.ClassNode.children
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: children
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 145
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public List<ClassNode> children
    return:
      type: System.Collections.Generic.List{LobsterFramework.AbilitySystem.ClassNode}
    content.vb: Public children As List(Of ClassNode)
- uid: LobsterFramework.AbilitySystem.ClassNode.requirements
  commentId: F:LobsterFramework.AbilitySystem.ClassNode.requirements
  id: requirements
  parent: LobsterFramework.AbilitySystem.ClassNode
  langs:
  - csharp
  - vb
  name: requirements
  nameWithType: ClassNode.requirements
  fullName: LobsterFramework.AbilitySystem.ClassNode.requirements
  type: Field
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: requirements
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 146
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public HashSet<Type> requirements
    return:
      type: System.Collections.Generic.HashSet{System.Type}
    content.vb: Public requirements As HashSet(Of Type)
- uid: LobsterFramework.AbilitySystem.ClassNode.#ctor(System.Type)
  commentId: M:LobsterFramework.AbilitySystem.ClassNode.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: LobsterFramework.AbilitySystem.ClassNode
  langs:
  - csharp
  - vb
  name: ClassNode(Type)
  nameWithType: ClassNode.ClassNode(Type)
  fullName: LobsterFramework.AbilitySystem.ClassNode.ClassNode(System.Type)
  type: Constructor
  source:
    remote:
      path: H:/Stuff/BallField/Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    id: .ctor
    path: ../Assets/Scripts/Editor/Attributes/ComponentRequiredAttribute.cs
    startLine: 148
  assemblies:
  - MyScripts
  namespace: LobsterFramework.AbilitySystem
  syntax:
    content: public ClassNode(Type type)
    parameters:
    - id: type
      type: System.Type
    content.vb: Public Sub New(type As Type)
  overload: LobsterFramework.AbilitySystem.ClassNode.#ctor*
  nameWithType.vb: ClassNode.New(Type)
  fullName.vb: LobsterFramework.AbilitySystem.ClassNode.New(System.Type)
  name.vb: New(Type)
references:
- uid: LobsterFramework.AbilitySystem
  commentId: N:LobsterFramework.AbilitySystem
  name: LobsterFramework.AbilitySystem
  nameWithType: LobsterFramework.AbilitySystem
  fullName: LobsterFramework.AbilitySystem
  spec.csharp:
  - uid: LobsterFramework
    name: LobsterFramework
  - name: .
  - uid: LobsterFramework.AbilitySystem
    name: AbilitySystem
  spec.vb:
  - uid: LobsterFramework
    name: LobsterFramework
  - name: .
  - uid: LobsterFramework.AbilitySystem
    name: AbilitySystem
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: LobsterFramework.AbilitySystem.ClassNode
  commentId: T:LobsterFramework.AbilitySystem.ClassNode
  parent: LobsterFramework.AbilitySystem
  name: ClassNode
  nameWithType: ClassNode
  fullName: LobsterFramework.AbilitySystem.ClassNode
- uid: System.Collections.Generic.List{LobsterFramework.AbilitySystem.ClassNode}
  commentId: T:System.Collections.Generic.List{LobsterFramework.AbilitySystem.ClassNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ClassNode>
  nameWithType: List<ClassNode>
  fullName: System.Collections.Generic.List<LobsterFramework.AbilitySystem.ClassNode>
  nameWithType.vb: List(Of ClassNode)
  fullName.vb: System.Collections.Generic.List(Of LobsterFramework.AbilitySystem.ClassNode)
  name.vb: List(Of ClassNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: LobsterFramework.AbilitySystem.ClassNode
    name: ClassNode
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: LobsterFramework.AbilitySystem.ClassNode
    name: ClassNode
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: System.Collections.Generic.HashSet{System.Type}
  commentId: T:System.Collections.Generic.HashSet{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  name: HashSet<Type>
  nameWithType: HashSet<Type>
  fullName: System.Collections.Generic.HashSet<System.Type>
  nameWithType.vb: HashSet(Of Type)
  fullName.vb: System.Collections.Generic.HashSet(Of System.Type)
  name.vb: HashSet(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: <
  - uid: System.Type
    name: Type
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Type
    name: Type
    isExternal: true
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LobsterFramework.AbilitySystem.ClassNode.#ctor*
  commentId: Overload:LobsterFramework.AbilitySystem.ClassNode.#ctor
  name: ClassNode
  nameWithType: ClassNode.ClassNode
  fullName: LobsterFramework.AbilitySystem.ClassNode.ClassNode
  nameWithType.vb: ClassNode.New
  fullName.vb: LobsterFramework.AbilitySystem.ClassNode.New
  name.vb: New
