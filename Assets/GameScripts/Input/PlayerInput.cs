//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/GameScripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameScripts
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Utility"",
            ""id"": ""7a9524ff-1d3a-4099-afc2-e2f99b9d8ced"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""340214aa-3c5f-4bd4-99da-d47ff5832894"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b5b004f4-aeca-46e5-b4a8-eab94ad71baa"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""6e045d59-e3b2-4dfe-9c41-bbf9e90271ee"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1221389a-153d-4aba-87cf-603377a2605d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""beda39d2-0776-427a-ba1a-2b40a178d6cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargeAttack"",
                    ""type"": ""Button"",
                    ""id"": ""fcceabac-55b8-475a-a56f-bbfa39c01db4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""8e76cc6e-dc7e-42f6-aa70-02b297d66c30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""bf56d179-25cd-439e-8843-625a403f793a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""4707ddf1-9e7e-4859-8145-8e971e0fd629"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Next Interactable"",
                    ""type"": ""Button"",
                    ""id"": ""fa744c36-197b-4951-a90e-13f496b3bf56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Previous Interactable"",
                    ""type"": ""Button"",
                    ""id"": ""f41da5e5-cc4a-411b-a6dc-a3f727a2b14a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""f1a29f0a-57f0-46fb-88bf-235392f12f91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.2,y=0.2)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Guard"",
                    ""type"": ""Button"",
                    ""id"": ""6864dc9a-806b-4c14-a571-75cca0ee8a0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""f2ad83b8-d27f-41f1-9732-70cfe71f75f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch Offhand Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""f3cf8cc0-8d07-435a-a2e2-196b0af97762"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Offhand Ability"",
                    ""type"": ""Button"",
                    ""id"": ""00616b6e-30df-45ca-a849-0fef22c79ab3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""19da8f25-1aeb-4213-b710-1e1f369a7d9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon Art"",
                    ""type"": ""Button"",
                    ""id"": ""3f6c1294-69c4-429e-ab8d-981af9bbd806"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryOpen"",
                    ""type"": ""Button"",
                    ""id"": ""8c8d92f8-7868-4f38-b1ea-1f671e998333"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78a09a5d-82dd-435f-8dbd-5d0e9c65ddde"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Directions"",
                    ""id"": ""7e185370-1913-4bae-a852-af2f456acc4a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fd38ae07-81ca-4490-8cbd-c6649fe3e90f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ae3c2eb-80d5-4b30-9c84-2c4eb9bd97e8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b2b2af3-4148-4da3-8bcd-fef5a5bfa679"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""050e55de-e480-4de6-867d-18f46a8b865e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cfc192ca-04f4-4a64-9674-c59065631c95"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1916c9f0-6a9f-4c86-8af7-f20cb3da8dcf"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47d51f0a-c713-4907-8fe0-e924bffcc3f2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5220e80f-f42c-40f8-8ba6-90352f26a14a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Next Interactable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e82ea21f-3052-490a-a890-1ccf5e2ab41b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Previous Interactable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""936f0667-836c-4736-8f1b-6f5d08f707ee"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76ab0ddd-2cc2-459a-8dda-f071d93b645e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Guard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7de3cb3-44c4-4b38-8089-608d800ca397"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChargeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e2f916d-d36a-4056-8e7e-05b8899ed33c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa9b8a90-42a8-4856-b823-32e429514ef3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Offhand Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""635e8908-e302-46e3-8bab-db00edfe8f17"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f40a0e7e-889b-4b9d-a993-8adce9c61496"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon Art"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d51977d-a629-4d56-96b6-c1bbae29b6a8"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch Offhand Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df8fa404-746e-4d34-a487-50c25bb6b7b8"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryOpen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""ea5b9aa4-7418-491e-a201-ffcd46bbfe1b"",
            ""actions"": [
                {
                    ""name"": ""InventoryClose"",
                    ""type"": ""Button"",
                    ""id"": ""9177ec81-b19e-4be2-8ab7-71c7fbf94a9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ec06d5ba-231e-41ff-9965-2a6e1a31e62b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""17641fa9-17bb-4cf9-b3de-fab2c75ee763"",
            ""actions"": [
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""a0b8eec5-1bb1-4ac0-bc11-2310ae3446cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f3bb5ef-842d-4902-888f-a781d14df89a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Utility
            m_Utility = asset.FindActionMap("Utility", throwIfNotFound: true);
            m_Utility_Mouse = m_Utility.FindAction("Mouse", throwIfNotFound: true);
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
            m_Player_ChargeAttack = m_Player.FindAction("ChargeAttack", throwIfNotFound: true);
            m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
            m_Player_PrimaryInteraction = m_Player.FindAction("Primary Interaction", throwIfNotFound: true);
            m_Player_SecondaryInteraction = m_Player.FindAction("Secondary Interaction", throwIfNotFound: true);
            m_Player_NextInteractable = m_Player.FindAction("Next Interactable", throwIfNotFound: true);
            m_Player_PreviousInteractable = m_Player.FindAction("Previous Interactable", throwIfNotFound: true);
            m_Player_Rotate = m_Player.FindAction("Rotate", throwIfNotFound: true);
            m_Player_Guard = m_Player.FindAction("Guard", throwIfNotFound: true);
            m_Player_SwitchWeapon = m_Player.FindAction("Switch Weapon", throwIfNotFound: true);
            m_Player_SwitchOffhandWeapon = m_Player.FindAction("Switch Offhand Weapon", throwIfNotFound: true);
            m_Player_OffhandAbility = m_Player.FindAction("Offhand Ability", throwIfNotFound: true);
            m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
            m_Player_WeaponArt = m_Player.FindAction("Weapon Art", throwIfNotFound: true);
            m_Player_InventoryOpen = m_Player.FindAction("InventoryOpen", throwIfNotFound: true);
            // Inventory
            m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
            m_Inventory_InventoryClose = m_Inventory.FindAction("InventoryClose", throwIfNotFound: true);
            // PauseMenu
            m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
            m_PauseMenu_Resume = m_PauseMenu.FindAction("Resume", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Utility
        private readonly InputActionMap m_Utility;
        private List<IUtilityActions> m_UtilityActionsCallbackInterfaces = new List<IUtilityActions>();
        private readonly InputAction m_Utility_Mouse;
        public struct UtilityActions
        {
            private @PlayerInput m_Wrapper;
            public UtilityActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Mouse => m_Wrapper.m_Utility_Mouse;
            public InputActionMap Get() { return m_Wrapper.m_Utility; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UtilityActions set) { return set.Get(); }
            public void AddCallbacks(IUtilityActions instance)
            {
                if (instance == null || m_Wrapper.m_UtilityActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UtilityActionsCallbackInterfaces.Add(instance);
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
            }

            private void UnregisterCallbacks(IUtilityActions instance)
            {
                @Mouse.started -= instance.OnMouse;
                @Mouse.performed -= instance.OnMouse;
                @Mouse.canceled -= instance.OnMouse;
            }

            public void RemoveCallbacks(IUtilityActions instance)
            {
                if (m_Wrapper.m_UtilityActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUtilityActions instance)
            {
                foreach (var item in m_Wrapper.m_UtilityActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UtilityActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UtilityActions @Utility => new UtilityActions(this);

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Attack;
        private readonly InputAction m_Player_ChargeAttack;
        private readonly InputAction m_Player_Pause;
        private readonly InputAction m_Player_PrimaryInteraction;
        private readonly InputAction m_Player_SecondaryInteraction;
        private readonly InputAction m_Player_NextInteractable;
        private readonly InputAction m_Player_PreviousInteractable;
        private readonly InputAction m_Player_Rotate;
        private readonly InputAction m_Player_Guard;
        private readonly InputAction m_Player_SwitchWeapon;
        private readonly InputAction m_Player_SwitchOffhandWeapon;
        private readonly InputAction m_Player_OffhandAbility;
        private readonly InputAction m_Player_Dash;
        private readonly InputAction m_Player_WeaponArt;
        private readonly InputAction m_Player_InventoryOpen;
        public struct PlayerActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Attack => m_Wrapper.m_Player_Attack;
            public InputAction @ChargeAttack => m_Wrapper.m_Player_ChargeAttack;
            public InputAction @Pause => m_Wrapper.m_Player_Pause;
            public InputAction @PrimaryInteraction => m_Wrapper.m_Player_PrimaryInteraction;
            public InputAction @SecondaryInteraction => m_Wrapper.m_Player_SecondaryInteraction;
            public InputAction @NextInteractable => m_Wrapper.m_Player_NextInteractable;
            public InputAction @PreviousInteractable => m_Wrapper.m_Player_PreviousInteractable;
            public InputAction @Rotate => m_Wrapper.m_Player_Rotate;
            public InputAction @Guard => m_Wrapper.m_Player_Guard;
            public InputAction @SwitchWeapon => m_Wrapper.m_Player_SwitchWeapon;
            public InputAction @SwitchOffhandWeapon => m_Wrapper.m_Player_SwitchOffhandWeapon;
            public InputAction @OffhandAbility => m_Wrapper.m_Player_OffhandAbility;
            public InputAction @Dash => m_Wrapper.m_Player_Dash;
            public InputAction @WeaponArt => m_Wrapper.m_Player_WeaponArt;
            public InputAction @InventoryOpen => m_Wrapper.m_Player_InventoryOpen;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @ChargeAttack.started += instance.OnChargeAttack;
                @ChargeAttack.performed += instance.OnChargeAttack;
                @ChargeAttack.canceled += instance.OnChargeAttack;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @PrimaryInteraction.started += instance.OnPrimaryInteraction;
                @PrimaryInteraction.performed += instance.OnPrimaryInteraction;
                @PrimaryInteraction.canceled += instance.OnPrimaryInteraction;
                @SecondaryInteraction.started += instance.OnSecondaryInteraction;
                @SecondaryInteraction.performed += instance.OnSecondaryInteraction;
                @SecondaryInteraction.canceled += instance.OnSecondaryInteraction;
                @NextInteractable.started += instance.OnNextInteractable;
                @NextInteractable.performed += instance.OnNextInteractable;
                @NextInteractable.canceled += instance.OnNextInteractable;
                @PreviousInteractable.started += instance.OnPreviousInteractable;
                @PreviousInteractable.performed += instance.OnPreviousInteractable;
                @PreviousInteractable.canceled += instance.OnPreviousInteractable;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Guard.started += instance.OnGuard;
                @Guard.performed += instance.OnGuard;
                @Guard.canceled += instance.OnGuard;
                @SwitchWeapon.started += instance.OnSwitchWeapon;
                @SwitchWeapon.performed += instance.OnSwitchWeapon;
                @SwitchWeapon.canceled += instance.OnSwitchWeapon;
                @SwitchOffhandWeapon.started += instance.OnSwitchOffhandWeapon;
                @SwitchOffhandWeapon.performed += instance.OnSwitchOffhandWeapon;
                @SwitchOffhandWeapon.canceled += instance.OnSwitchOffhandWeapon;
                @OffhandAbility.started += instance.OnOffhandAbility;
                @OffhandAbility.performed += instance.OnOffhandAbility;
                @OffhandAbility.canceled += instance.OnOffhandAbility;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @WeaponArt.started += instance.OnWeaponArt;
                @WeaponArt.performed += instance.OnWeaponArt;
                @WeaponArt.canceled += instance.OnWeaponArt;
                @InventoryOpen.started += instance.OnInventoryOpen;
                @InventoryOpen.performed += instance.OnInventoryOpen;
                @InventoryOpen.canceled += instance.OnInventoryOpen;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @ChargeAttack.started -= instance.OnChargeAttack;
                @ChargeAttack.performed -= instance.OnChargeAttack;
                @ChargeAttack.canceled -= instance.OnChargeAttack;
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @PrimaryInteraction.started -= instance.OnPrimaryInteraction;
                @PrimaryInteraction.performed -= instance.OnPrimaryInteraction;
                @PrimaryInteraction.canceled -= instance.OnPrimaryInteraction;
                @SecondaryInteraction.started -= instance.OnSecondaryInteraction;
                @SecondaryInteraction.performed -= instance.OnSecondaryInteraction;
                @SecondaryInteraction.canceled -= instance.OnSecondaryInteraction;
                @NextInteractable.started -= instance.OnNextInteractable;
                @NextInteractable.performed -= instance.OnNextInteractable;
                @NextInteractable.canceled -= instance.OnNextInteractable;
                @PreviousInteractable.started -= instance.OnPreviousInteractable;
                @PreviousInteractable.performed -= instance.OnPreviousInteractable;
                @PreviousInteractable.canceled -= instance.OnPreviousInteractable;
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
                @Guard.started -= instance.OnGuard;
                @Guard.performed -= instance.OnGuard;
                @Guard.canceled -= instance.OnGuard;
                @SwitchWeapon.started -= instance.OnSwitchWeapon;
                @SwitchWeapon.performed -= instance.OnSwitchWeapon;
                @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
                @SwitchOffhandWeapon.started -= instance.OnSwitchOffhandWeapon;
                @SwitchOffhandWeapon.performed -= instance.OnSwitchOffhandWeapon;
                @SwitchOffhandWeapon.canceled -= instance.OnSwitchOffhandWeapon;
                @OffhandAbility.started -= instance.OnOffhandAbility;
                @OffhandAbility.performed -= instance.OnOffhandAbility;
                @OffhandAbility.canceled -= instance.OnOffhandAbility;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @WeaponArt.started -= instance.OnWeaponArt;
                @WeaponArt.performed -= instance.OnWeaponArt;
                @WeaponArt.canceled -= instance.OnWeaponArt;
                @InventoryOpen.started -= instance.OnInventoryOpen;
                @InventoryOpen.performed -= instance.OnInventoryOpen;
                @InventoryOpen.canceled -= instance.OnInventoryOpen;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Inventory
        private readonly InputActionMap m_Inventory;
        private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
        private readonly InputAction m_Inventory_InventoryClose;
        public struct InventoryActions
        {
            private @PlayerInput m_Wrapper;
            public InventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @InventoryClose => m_Wrapper.m_Inventory_InventoryClose;
            public InputActionMap Get() { return m_Wrapper.m_Inventory; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
            public void AddCallbacks(IInventoryActions instance)
            {
                if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
                @InventoryClose.started += instance.OnInventoryClose;
                @InventoryClose.performed += instance.OnInventoryClose;
                @InventoryClose.canceled += instance.OnInventoryClose;
            }

            private void UnregisterCallbacks(IInventoryActions instance)
            {
                @InventoryClose.started -= instance.OnInventoryClose;
                @InventoryClose.performed -= instance.OnInventoryClose;
                @InventoryClose.canceled -= instance.OnInventoryClose;
            }

            public void RemoveCallbacks(IInventoryActions instance)
            {
                if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventoryActions instance)
            {
                foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InventoryActions @Inventory => new InventoryActions(this);

        // PauseMenu
        private readonly InputActionMap m_PauseMenu;
        private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
        private readonly InputAction m_PauseMenu_Resume;
        public struct PauseMenuActions
        {
            private @PlayerInput m_Wrapper;
            public PauseMenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Resume => m_Wrapper.m_PauseMenu_Resume;
            public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
            public void AddCallbacks(IPauseMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
            }

            private void UnregisterCallbacks(IPauseMenuActions instance)
            {
                @Resume.started -= instance.OnResume;
                @Resume.performed -= instance.OnResume;
                @Resume.canceled -= instance.OnResume;
            }

            public void RemoveCallbacks(IPauseMenuActions instance)
            {
                if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPauseMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PauseMenuActions @PauseMenu => new PauseMenuActions(this);
        public interface IUtilityActions
        {
            void OnMouse(InputAction.CallbackContext context);
        }
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnChargeAttack(InputAction.CallbackContext context);
            void OnPause(InputAction.CallbackContext context);
            void OnPrimaryInteraction(InputAction.CallbackContext context);
            void OnSecondaryInteraction(InputAction.CallbackContext context);
            void OnNextInteractable(InputAction.CallbackContext context);
            void OnPreviousInteractable(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnGuard(InputAction.CallbackContext context);
            void OnSwitchWeapon(InputAction.CallbackContext context);
            void OnSwitchOffhandWeapon(InputAction.CallbackContext context);
            void OnOffhandAbility(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnWeaponArt(InputAction.CallbackContext context);
            void OnInventoryOpen(InputAction.CallbackContext context);
        }
        public interface IInventoryActions
        {
            void OnInventoryClose(InputAction.CallbackContext context);
        }
        public interface IPauseMenuActions
        {
            void OnResume(InputAction.CallbackContext context);
        }
    }
}
